#!/usr/bin/env python
from mu_auv_localization import ekf_class
import numpy as np
import rospkg
from pyquaternion import Quaternion
import rospy
import tf

from geometry_msgs.msg import Pose, PoseArray, PoseStamped, TwistStamped
from nav_msgs.msg import Odometry
from apriltag_ros.msg import AprilTagDetectionArray
from apriltag_ros.msg import AprilTagDetection
from visualization_msgs.msg import Marker, MarkerArray
from sensor_msgs.msg import Imu, FluidPressure
from mavros_msgs.srv import SetMode
from numpy import genfromtxt
import os
cam_transform = np.array([[0.0, 0.0, 1.0],
                          [0.0, 1.0, 0.0],
                          [-1.0, 0.0, 0.0]])
# NUM_P = 100
state_dim = 3  # x, y, z
max_dist_to_tag = 3
# x_range = (0, 3)
# y_range = (0, 2)
# z_range = (0, 1.5)
# cov_mat = 1.5
# cov_mat = 0.05
cov_mat = 0.05
old_yaw = 0
# set_mode_srv = rospy.ServiceProxy('mavros/set_mode', SetMode)
# res = set_mode_srv(0, " OFFBOARD")

rospack = rospkg.RosPack()
tags = None
# tags[:, 1] += 0.08  # to shift x-value according to gantry origin
# tags[:,2] += 0.02  # to shift y-value according to gantry origin
# print(tags)
rviz = False


def callback_imu(msg, tmp_list):
    global old_yaw
    [
        ekf, publisher_position, publisher_mavros, broadcaster,
        publisher_marker, publisher_twist
    ] = tmp_list
    # print(np.sqrt((msg.linear_acceleration.x/50)**2+(msg.linear_acceleration.y/50)**2+(msg.linear_acceleration.z/50)**2))
    # ekf.prediction(tmp[0], tmp[1], tmp[2] - 9.81)
    x_rot_vel = msg.angular_velocity.x
    y_rot_vel = msg.angular_velocity.y
    z_rot_vel = msg.angular_velocity.z
    ekf.prediction(x_rot_vel, y_rot_vel, z_rot_vel)

    estimated_position = ekf.get_x_est()

    estimated_orientation = ekf.yaw_pitch_roll_to_quat(-(old_yaw - np.pi / 2),
                                                       0, 0)
    # [mm]
    x_mean_ned = estimated_position[0] * 1000  # global Tank Koordinate System(NED)
    y_mean_ned = estimated_position[1] * 1000
    z_mean_ned = estimated_position[2] * 1000

    # publish estimated_pose [m] in mavros to /mavros/vision_pose/pose
    # this pose needs to be in ENU
    mavros_position = PoseStamped()
    mavros_position.header.stamp = rospy.Time.now()
    mavros_position.header.frame_id = "map"
    mavros_position.pose.position.x = y_mean_ned / 1000  # NED Coordinate to ENU(ROS)
    mavros_position.pose.position.y = x_mean_ned / 1000
    mavros_position.pose.position.z = -z_mean_ned / 1000

    mavros_position.pose.orientation.w = estimated_orientation.w
    mavros_position.pose.orientation.x = estimated_orientation.x
    mavros_position.pose.orientation.y = estimated_orientation.y
    mavros_position.pose.orientation.z = estimated_orientation.z
    #publisher_mavros.publish(mavros_position)  # publish to boat

    # publish estimated_pose [m]
    position = PoseStamped()
    position.header.stamp = rospy.Time.now()
    position.header.frame_id = "map_ned"  # ned
    position.pose.position.x = x_mean_ned / 1000
    position.pose.position.y = y_mean_ned / 1000
    position.pose.position.z = z_mean_ned / 1000
    estimated_orientation = ekf.yaw_pitch_roll_to_quat(old_yaw, 0, 0)
    position.pose.orientation.w = estimated_orientation.w
    position.pose.orientation.x = estimated_orientation.x
    position.pose.orientation.y = estimated_orientation.y
    position.pose.orientation.z = estimated_orientation.z
    publisher_position.publish(position)

    msg_twist = TwistStamped()
    msg_twist.header.stamp = rospy.Time.now()
    msg_twist.header.frame_id = "global_tank"  # ned
    msg_twist.twist.linear.x = estimated_position[3]
    msg_twist.twist.linear.y = estimated_position[4]
    msg_twist.twist.linear.z = estimated_position[5]
    publisher_twist.publish(msg_twist)


def callback_orientation(msg, ekf):
    rotation_body_frame = Quaternion(w=msg.pose.orientation.w,
                                     x=msg.pose.orientation.x,
                                     y=msg.pose.orientation.y,
                                     z=msg.pose.orientation.z)
    yaw, pitch, roll = rotation_body_frame.inverse.yaw_pitch_roll
    yaw_current = -yaw
    pitch_current = -pitch
    roll_current = -((roll + 360 / 180.0 * np.pi) %
                     (np.pi * 2) - 180 / 180.0 * np.pi)
    ekf.current_rotation(yaw_current, pitch_current, roll_current)


def callback_pressure(msg, ekf):
    measurement = msg.fluid_pressure
    ekf.update_pressure(measurement)


def callback(msg, tmp_list):
    """"""
    global old_yaw, number_of_unseen_tags, last_tag_detected, cam_transform
    [
        ekf, publisher_position, publisher_mavros, broadcaster,
        publisher_marker, publisher_twist, publisher_state
    ] = tmp_list

    # get length of message
    num_meas = len(msg.detections)

    if num_meas >= 1:
        orientation_yaw_pitch_roll = np.zeros((num_meas, 3))
        measurements = np.empty([0, 4])
        for i, tag in enumerate(msg.detections):
            tag_id = int(tag.id[0])
            tag_distance_cam = np.matmul(cam_transform, np.array([[tag.pose.pose.pose.position.x], [tag.pose.pose.pose.position.y], [tag.pose.pose.pose.position.z]]))

            dist = np.linalg.norm(tag_distance_cam)
            tmpquat = Quaternion(w=tag.pose.pose.pose.orientation.w,
                                 x=tag.pose.pose.pose.orientation.x,
                                 y=tag.pose.pose.pose.orientation.y,
                                 z=tag.pose.pose.pose.orientation.z)

            orientation_yaw_pitch_roll[i, :] = tmpquat.inverse.yaw_pitch_roll

            if dist <= max_dist_to_tag:
                index = np.where(tags[:, 0] == tag_id)
                measurements = np.append(measurements, np.array([[dist, tags[index, 1:4]]]), axis=0)
        # ekf update step
        ekf.update_tags(measurements)

        yaw_list = np.asarray(orientation_yaw_pitch_roll[:, 0])
        yaw = np.arctan2(np.mean(np.sin(yaw_list)), np.mean(np.cos(yaw_list)))
        # print('yaw',yaw)
        # pitch = np.mean(orientation_yaw_pitch_roll[:, 1])
        # roll = np.mean(orientation_yaw_pitch_roll[:, 2])
        last_tag_detected = rospy.get_time()
    else:
        # number_of_unseen_tags = number_of_unseen_tags + 1
        rospy.logwarn_throttle(10.0, "\nNo Tags detected for " + str(rospy.get_time()-last_tag_detected) + "s!")
        ekf.update_velocity_if_nothing_is_seen()
        yaw = old_yaw
    old_yaw = yaw
    # print "reale messungen: " + str(measurements)
    estimated_orientation = ekf.yaw_pitch_roll_to_quat(-(old_yaw - np.pi / 2),
                                                       0, 0)
    estimated_position = ekf.get_x_est()

    # [mm]
    x_mean_ned = estimated_position[0] * 1000  # global Tank Koordinate System(NED)
    y_mean_ned = estimated_position[1] * 1000
    z_mean_ned = estimated_position[2] * 1000
    mavros_position = PoseStamped()
    mavros_position.header.stamp = rospy.Time.now()
    mavros_position.header.frame_id = "map"
    mavros_position.pose.position.x = y_mean_ned / 1000  # NED Coordinate to ENU(ROS)
    mavros_position.pose.position.y = x_mean_ned / 1000
    mavros_position.pose.position.z = -z_mean_ned / 1000
    mavros_position.pose.orientation.w = estimated_orientation.w
    mavros_position.pose.orientation.x = estimated_orientation.x
    mavros_position.pose.orientation.y = estimated_orientation.y
    mavros_position.pose.orientation.z = estimated_orientation.z
    publisher_mavros.publish(mavros_position)  # publish to boat

    state_msg = Odometry()
    state_msg.header.stamp = rospy.Time.now()
    state_msg.header.frame_id = 'map'
    state_msg.child_frame_id = 'map'
    state_msg.pose.pose.position.x = estimated_position[0]
    state_msg.pose.pose.position.y = estimated_position[1]
    state_msg.pose.pose.position.z = estimated_position[2]
    state_msg.pose.pose.orientation.w = estimated_orientation.w
    state_msg.pose.pose.orientation.x = estimated_orientation.x
    state_msg.pose.pose.orientation.y = estimated_orientation.y
    state_msg.pose.pose.orientation.z = estimated_orientation.z
    # state_msg.pose.covariance[0] = self.sigma[0, 0]
    # state_msg.pose.covariance[7] = self.sigma[1, 1]
    # state_msg.pose.covariance[14] = self.sigma[2, 2]
    state_msg.twist.twist.linear.x = estimated_position[3]  # self.linear_velocity[0]
    state_msg.twist.twist.linear.y = estimated_position[4]  # self.linear_velocity[1]
    state_msg.twist.twist.linear.z = estimated_position[5]  # self.linear_velocity[2]
    # state_msg.twist.twist.angular.x = self.angular_velocity[0]
    # state_msg.twist.twist.angular.y = self.angular_velocity[1]
    # state_msg.twist.twist.angular.z = self.angular_velocity[2]
    # state_msg.pose.pose.orientation = self.orientation
    publisher_state.publish(state_msg)


def main():
    global tags, cam_reversed, last_tag_detected
    rospy.init_node('ekf_node')
    try:
        which_calibration = rospy.get_param('~calibration')
    except KeyError:
        print(
            "################## You have to set a calibration parameter ###########################"
        )
        exit(-1)
    try:
        cam_reversed = rospy.get_param('~cam_reserved')
    except KeyError:
        cam_reversed = False

    if which_calibration == "gazebo":
        print("using gazebo calibration")
        data_path = rospack.get_path(
            "mu_auv_localization"
        ) + '/scripts/calibration_ground_truth_gazebo.csv'  # in gazebo
    else:
        if which_calibration == "water_tank":
            print("using real calibration")
            data_path = rospack.get_path(
                "mu_auv_localization"
            ) + '/scripts/calibration_tank.csv'  # in real tank
        else:
            print("could not find correct parameter for calibration ")
            exit(-1)
    tags = genfromtxt(data_path, delimiter=',')  # home PC
    tags = tags[:, 0:4]
    tags[:, 3] += 0.0

    last_tag_detected = rospy.get_time()

    ekf = ekf_class.ExtendedKalmanFilter()

    publisher_state = rospy.Publisher("estimated_state", 
                                      Odometry,
                                      queue_size=1)
    publisher_position = rospy.Publisher('estimated_pose',
                                         PoseStamped,
                                         queue_size=1)
    publisher_twist = rospy.Publisher('estimated_twist',
                                      TwistStamped,
                                      queue_size=1)
    publisher_mavros = rospy.Publisher("mavros/vision_pose/pose",
                                       PoseStamped,
                                       queue_size=1)
    # publisher_particles = rospy.Publisher('particle_poses', PoseArray, queue_size=1)
    publisher_marker = rospy.Publisher('Sphere', MarkerArray, queue_size=1)
    broadcaster = tf.TransformBroadcaster()

    rospy.Subscriber("tag_detections",
                     AprilTagDetectionArray,
                     callback, [
                         ekf, publisher_position, publisher_mavros, broadcaster,
                         publisher_marker, publisher_twist, publisher_state
                     ],
                     queue_size=1)
    rospy.Subscriber("mavros/imu/data",
                     Imu,
                     callback_imu, [
                         ekf, publisher_position, publisher_mavros, broadcaster,
                         publisher_marker, publisher_twist
                     ],
                     queue_size=1)
    rospy.Subscriber("pressure",
                     FluidPressure,
                     callback_pressure,
                     ekf,
                     queue_size=1)
    rospy.Subscriber("pose_px4",
                     PoseStamped,
                     callback_orientation,
                     ekf,
                     queue_size=1)

    rospy.spin()


if __name__ == '__main__':
    main()
